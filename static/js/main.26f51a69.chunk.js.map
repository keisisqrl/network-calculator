{"version":3,"sources":["CalcIO.js","CalcInput.js","CalcOutput.js","ScalePick.js","GenCalc.js","XferCalc.js","WindowCalc.js","App.js","serviceWorker.js","index.js"],"names":["humanFormat","require","CalcIO","myValue","parseFloat","_this","props","value","ppValue","val","Number","isNaN","unit","scale","Component","CalcInput","react_default","a","createElement","Fragment","htmlFor","this","name","label","type","onChange","className","CalcOutput","ScalePick","checked","GenCalc","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeState","e","setState","defineProperty","target","state","legend","inner","src_ScalePick_0","XferCalc","rate","size","_this$state","xferTime","parseInt","wrap","src_CalcInput","src_CalcOutput","WindowCalc","rtt","window","currentRate","Math","floor","idealWindow","round","WindowCalc_RttInput","max","RttInput","_this2","App","notifyUpdates","updates","src_XferCalc","src_WindowCalc","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","_"],"mappings":"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","file":"static/js/main.26f51a69.chunk.js","sourcesContent":["import { Component } from \"react\";\nvar humanFormat = require(\"human-format\");\n\nclass CalcIO extends Component {\n  myValue = () => {\n    return parseFloat(this.props.value);\n  }\n\n  ppValue = () => {\n    let val = this.myValue();\n    return humanFormat(\n      (Number.isNaN(val) ? 0 : val),\n      {\n        unit: this.props.unit,\n        scale: this.props.scale\n      }\n    );\n  }\n}\n\nexport default CalcIO;\n","import React from \"react\";\nimport CalcIO from \"./CalcIO.js\";\nimport \"./form.css\";\n\nclass CalcInput extends CalcIO {\n\n  render () {\n    return (\n      <>\n      <label htmlFor={this.props.name}>\n        {this.props.label}\n      </label>\n      <input\n        type=\"text\"\n        name={this.props.name}\n        value={this.props.value}\n        onChange={this.props.onChange}\n        />\n      <span className=\"value\">\n        {this.ppValue()}\n      </span>\n      </>\n    )\n  }\n}\n\nexport default CalcInput;\n","import React from \"react\";\nimport \"./form.css\";\nimport CalcIO from \"./CalcIO.js\";\n\nclass CalcOutput extends CalcIO {\n\n  render () {\n    return (\n      <>\n      <span className=\"label\">\n        {this.props.label}\n      </span>\n      <span className=\"rawValue\">\n        {this.props.value} {this.props.unit}\n      </span>\n      <span className=\"value\">\n        {this.ppValue()}\n      </span>\n      </>\n    )\n  }\n}\n\nexport default CalcOutput;\n","import React, { Component } from \"react\";\nimport \"./ScalePick.css\";\n\nclass ScalePick extends Component {\n  render () {\n    return (\n<span className=\"scalePick\">\n  <span>Scale:</span>\n  <span>\n    SI\n  <input type=\"radio\"\n    name=\"scale\"\n    value=\"SI\"\n    checked={this.props.scale === \"SI\"}\n    onChange={this.props.onChange}\n  />\n</span>\n<span>\n  binary\n    <input type=\"radio\"\n      name=\"scale\"\n      value=\"binary\"\n      checked={this.props.scale === \"binary\"}\n      onChange={this.props.onChange}\n      />\n  </span>\n</span>\n)\n}\n}\n\nexport default ScalePick;\n","import React, { Component } from \"react\";\nimport \"./form.css\";\nimport ScalePick from \"./ScalePick.js\";\n\nclass GenCalc extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      scale: 'SI' // human-format scale\n    }\n  }\n\n  changeState = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n  }\n\n  wrap(legend,inner) {\n    return (\n      <form>\n        <fieldset>\n          <legend>{legend}</legend>\n          <div className=\"grid\">\n            {inner}\n          <ScalePick\n            scale={this.state.scale}\n            onChange={this.changeState}\n            />\n          </div>\n        </fieldset>\n      </form>\n    )\n  }\n}\n\nexport default GenCalc;\n","import React from \"react\";\nimport \"./form.css\";\nimport CalcInput from \"./CalcInput.js\";\nimport CalcOutput from \"./CalcOutput.js\";\nimport GenCalc from \"./GenCalc.js\";\n\nclass XferCalc extends GenCalc {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rate: 100000000, // 100 Mbit/s\n      size: 8230000, // 8.23 Mbyte\n      scale: 'SI' // human-format scale\n    };\n  }\n\n\n  render() {\n    const { rate, size } = this.state;\n    const xferTime = (parseInt(size) * 8) / parseInt(rate);\n\n    return this.wrap(\"Calculate transfer time for rate\",\n      <>\n      <CalcInput\n            name=\"rate\"\n            value={rate}\n            onChange={this.changeState}\n            label=\"Rate in bits per second\"\n            unit=\"b/s\"\n            scale={this.state.scale}\n            />\n\n\n          <CalcInput\n            name=\"size\"\n            value={size}\n            onChange={this.changeState}\n            label=\"Transfer size in bytes\"\n            unit=\"B\"\n            scale={this.state.scale}\n            />\n\n          <CalcOutput\n            name=\"time\"\n            value={xferTime}\n            label=\"Theoretical transfer time\"\n            unit=\"s\"\n            scale=\"SI\"\n            /> {/* Time is always SI */}\n</>\n    );\n  }\n}\n\nexport default XferCalc;\n","import React from \"react\";\nimport \"./form.css\";\nimport CalcInput from \"./CalcInput.js\";\nimport CalcOutput from \"./CalcOutput.js\";\nimport GenCalc from \"./GenCalc.js\";\n\nclass WindowCalc extends GenCalc {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rate: 50000000, // 50 Mbit/s\n      rtt: 150, // 150 ms\n      window: 65535, // 65535 bytes\n      scale: 'SI' // human-format scale\n    };\n  }\n\n  render() {\n    const { rate, rtt, window } = this.state;\n    const currentRate = Math.floor(\n      ((parseInt(window) * 8) / parseFloat(rtt)) * 1000\n    );\n    const idealWindow = Math.round(\n      (parseInt(rate) * parseFloat(rtt)) / 1000 / 8\n    );\n\n    return this.wrap(\"Calculate window requirements\",\n      <>\n          <CalcInput\n            name=\"rate\"\n            label=\"Bandwidth in bits/second\"\n            value={rate}\n            onChange={this.changeState}\n            unit=\"b/s\"\n            scale={this.state.scale}\n          />\n\n        <RttInput\n            name=\"rtt\"\n            label=\"RTT in milliseconds\"\n            value={rtt}\n            onChange={this.changeState}\n            unit=\"s\"\n            scale=\"SI\"\n          /> {/* Time is always SI */}\n\n          <CalcOutput\n            label=\"Ideal window\"\n            value={idealWindow}\n            unit=\"B\"\n            scale={this.state.scale}\n            />\n\n          <CalcInput label=\"Current window in bytes\"\n            name=\"window\"\n            value={window}\n            onChange={this.changeState}\n            unit=\"B\"\n            scale={this.state.scale}\n          />\n\n          <CalcOutput\n            label=\"Max current transfer rate\"\n            value={currentRate}\n            unit=\"b/s\"\n            scale={this.state.scale}\n          />\n\n\n        <span className=\"label progLabel\">Transfer rate ratio</span>\n          <span className=\"rawValue progValue\">\n            <progress max={rate} value={currentRate} />\n          </span>\n          <span className=\"value\">\n            {Math.round((currentRate / rate) * 10000) / 100}%\n          </span>\n\n          </>\n    );\n  }\n}\n\nclass RttInput extends CalcInput {\n  myValue = () => {\n    return parseFloat(this.props.value) / 1000;\n  }\n}\n\nexport default WindowCalc;\n","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\nimport XferCalc from \"./XferCalc.js\";\nimport WindowCalc from \"./WindowCalc.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      updates: false\n    };\n  }\n\n  notifyUpdates = () => {\n    this.setState({\n      updates: true\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <XferCalc />\n        <WindowCalc />\n        { this.state.updates &&\n          <h2 className=\"updateAlert\">Updates ready; please refresh.</h2>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register(\n  {\n    onUpdate: (_) => {App.notifyUpdates()}\n  }\n);\n"],"sourceRoot":""}